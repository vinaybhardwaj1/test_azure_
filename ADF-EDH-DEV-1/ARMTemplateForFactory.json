{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-EDH-DEV-1"
		},
		"AzureBlobStorage_test_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_test'"
		},
		"AzureSqlDatabase_sink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_sink'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_ETL_DailyLoadFcast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['DeliveryDate']"
										},
										"sink": {
											"name": "DeliveryDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['TradeDate']"
										},
										"sink": {
											"name": "TradeDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['StartTime']"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['EndTime']"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['LoadForecastROI']"
										},
										"sink": {
											"name": "LoadForecastROI",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['LoadForecastNI']"
										},
										"sink": {
											"name": "LoadForecastNI",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "$['OutboundData']['PUB_DailyLoadFcst'][0]['AggregatedForecast']"
										},
										"sink": {
											"name": "AggregatedForecast",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILE_DailyLoadFcastSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_DailyLoadFcastSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_DATA"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FILE_DailyLoadFcastSource')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DailyLoadFcastSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ETL_RegisteredUnits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline extracts registered units data from xml report and loads data to registered_units, and processed_files tables.",
				"activities": [
					{
						"name": "DF_RegisteredUnits",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GetFileMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_RegisteredUnits",
								"type": "DataFlowReference",
								"parameters": {
									"curr_file_name": {
										"value": "'@{activity('GetFileMetadata').output.itemName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"RegUnitsSource": {},
									"RegUnitsSink": {},
									"ProcessedFilesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GetFileMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FILE_RegisteredUnitsSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_DATA"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_RegisteredUnits')]",
				"[concat(variables('factoryId'), '/datasets/DS_FILE_RegisteredUnitsSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DailyLoadFcastSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_sink",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DailyLoadFcast"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "test_dailyLoadFcast"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_ProcessedFilesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_sink",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "LogTables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "publish_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_metadata",
						"type": "text"
					},
					{
						"name": "last_updated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "processed_files"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_RegisteredUnitsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_sink",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RegisteredUnits"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "unit_id",
						"type": "nvarchar"
					},
					{
						"name": "unit_name",
						"type": "nvarchar"
					},
					{
						"name": "unit_type",
						"type": "nvarchar"
					},
					{
						"name": "party_id",
						"type": "nvarchar"
					},
					{
						"name": "party_name",
						"type": "text"
					},
					{
						"name": "associated_participant_id",
						"type": "nvarchar"
					},
					{
						"name": "associated_participant_name",
						"type": "text"
					},
					{
						"name": "trading_site_id",
						"type": "nvarchar"
					},
					{
						"name": "intermediary",
						"type": "bit"
					},
					{
						"name": "aolr_registered",
						"type": "bit"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "registration_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "last_updated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "registered_units"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FILE_DailyLoadFcastSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_test",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DailyLoadFcast"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PUB_DailyLoadFcst_202207041215.xml",
						"folderPath": "DailyLoadFcast_Test_Files",
						"container": "sqlite-blobstorage"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FILE_RegisteredUnitsSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_test",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "RegisteredUnits"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PUB_DailyRegisteredUnits_202206240756.xml",
						"folderPath": "RegisteredUnits",
						"container": "sqlite-blobstorage"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_test_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_sink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RegisteredUnits')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_FILE_RegisteredUnitsSource",
								"type": "DatasetReference"
							},
							"name": "RegUnitsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_RegisteredUnitsSink",
								"type": "DatasetReference"
							},
							"name": "RegUnitsSink"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_ProcessedFilesSink",
								"type": "DatasetReference"
							},
							"name": "ProcessedFilesSink"
						}
					],
					"transformations": [
						{
							"name": "FlattenRegUnitsXML"
						},
						{
							"name": "FormatRegUnits"
						},
						{
							"name": "FormatProcessedFile"
						}
					],
					"scriptLines": [
						"parameters{",
						"     curr_file_name as string",
						"}",
						"source(output(",
						"          OutboundData as ({@DatasetName} as string, {@DatasetType} as string, {@Date} as date, {@DateType} as string, {@PublishTime} as string, PUB_DailyRegisteredUnits as ({@AOLRRegistered} as boolean, {@AssociatedParticipantID} as string, {@AssociatedParticipantName} as string, {@Intermediary} as boolean, {@PartyID} as string, {@PartyName} as string, {@PublishTime} as string, {@ROW} as short, {@RegistrationDate} as string, {@Status} as string, {@TradingSiteID} as string, {@UnitID} as string, {@UnitName} as string, {@UnitType} as string)[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> RegUnitsSource",
						"RegUnitsSource foldDown(unroll(OutboundData.PUB_DailyRegisteredUnits, OutboundData.PUB_DailyRegisteredUnits),",
						"     mapColumn(",
						"          unit_id = OutboundData.PUB_DailyRegisteredUnits.{@UnitID},",
						"          unit_name = OutboundData.PUB_DailyRegisteredUnits.{@UnitName},",
						"          aolr_registered = OutboundData.PUB_DailyRegisteredUnits.{@AOLRRegistered},",
						"          associated_participant_id = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantID},",
						"          associated_participant_name = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantName},",
						"          intermediary = OutboundData.PUB_DailyRegisteredUnits.{@Intermediary},",
						"          party_id = OutboundData.PUB_DailyRegisteredUnits.{@PartyID},",
						"          party_name = OutboundData.PUB_DailyRegisteredUnits.{@PartyName},",
						"          publish_time = OutboundData.PUB_DailyRegisteredUnits.{@PublishTime},",
						"          registration_date = OutboundData.PUB_DailyRegisteredUnits.{@RegistrationDate},",
						"          status = OutboundData.PUB_DailyRegisteredUnits.{@Status},",
						"          trading_site_id = OutboundData.PUB_DailyRegisteredUnits.{@TradingSiteID},",
						"          unit_type = OutboundData.PUB_DailyRegisteredUnits.{@UnitType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FlattenRegUnitsXML",
						"FlattenRegUnitsXML derive(last_updated = currentUTC(),",
						"          registration_date = toDate(registration_date)) ~> FormatRegUnits",
						"RegUnitsSource derive(last_updated = currentUTC(),",
						"          file_metadata = concat(\r",
						"    'DatasetType: ',OutboundData.{@DatasetType},\r",
						"    ' Date: ',toString(OutboundData.{@Date}),\r",
						"    ' DateType: ',OutboundData.{@DateType}),",
						"          published_time_cast = toTimestamp(OutboundData.{@PublishTime},\"yyyy-MM-dd'T'HH:mm:ss\"),",
						"          file_name = $curr_file_name) ~> FormatProcessedFile",
						"FormatRegUnits sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          unit_id as string,",
						"          unit_name as string,",
						"          unit_type as string,",
						"          party_id as string,",
						"          party_name as string,",
						"          associated_participant_id as string,",
						"          associated_participant_name as string,",
						"          trading_site_id as string,",
						"          intermediary as boolean,",
						"          aolr_registered as boolean,",
						"          status as string,",
						"          registration_date as timestamp,",
						"          last_updated as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          unit_id,",
						"          unit_name,",
						"          unit_type,",
						"          associated_participant_id,",
						"          party_id,",
						"          party_name,",
						"          associated_participant_name,",
						"          trading_site_id,",
						"          intermediary,",
						"          aolr_registered,",
						"          status,",
						"          registration_date,",
						"          last_updated",
						"     )) ~> RegUnitsSink",
						"FormatProcessedFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          file_name as string,",
						"          publish_time as timestamp,",
						"          file_metadata as string,",
						"          last_updated as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          file_name,",
						"          publish_time = published_time_cast,",
						"          file_metadata,",
						"          last_updated",
						"     )) ~> ProcessedFilesSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FILE_RegisteredUnitsSource')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_RegisteredUnitsSink')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_ProcessedFilesSink')]"
			]
		}
	]
}