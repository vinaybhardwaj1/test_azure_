{
	"name": "DF_RegisteredUnits",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_FILE_RegisteredUnitsSource",
						"type": "DatasetReference"
					},
					"name": "RegUnitsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ASQL_RegisteredUnitsSink",
						"type": "DatasetReference"
					},
					"name": "RegUnitsSink"
				}
			],
			"transformations": [
				{
					"name": "FormatRegUnits"
				},
				{
					"name": "parseRegUnitXML"
				},
				{
					"name": "select1"
				},
				{
					"name": "parse1"
				},
				{
					"name": "FlattenRegUnitsXML"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OutboundData as ({@DatasetName} as string, {@DatasetType} as string, {@Date} as date, {@DateType} as string, {@PublishTime} as string, PUB_DailyRegisteredUnits as ({@AOLRRegistered} as boolean, {@AssociatedParticipantID} as string, {@AssociatedParticipantName} as string, {@Intermediary} as boolean, {@PartyID} as string, {@PartyName} as string, {@PublishTime} as string, {@ROW} as short, {@RegistrationDate} as string, {@Status} as string, {@TradingSiteID} as string, {@UnitID} as string, {@UnitName} as string, {@UnitType} as string)[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> RegUnitsSource",
				"select1 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FormatRegUnits",
				"parse1 parse(unit_id = OutboundData.PUB_DailyRegisteredUnits.{@UnitID} ? string[],",
				"          unit_type = OutboundData.PUB_DailyRegisteredUnits.{@UnitType} ? string[],",
				"          party_id = OutboundData.PUB_DailyRegisteredUnits.{@PartyID} ? string[],",
				"          party_name = OutboundData.PUB_DailyRegisteredUnits.{@PartyName} ? string[],",
				"          associated_participant_id = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantID} ? string,",
				"          associated_participant_name = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantName} ? string,",
				"          trading_site_id = OutboundData.PUB_DailyRegisteredUnits.{@TradingSiteID} ? string,",
				"          intermediary = OutboundData.PUB_DailyRegisteredUnits.{@Intermediary} ? boolean,",
				"          aolr_registered = OutboundData.PUB_DailyRegisteredUnits.{@AOLRRegistered} ? boolean,",
				"          status = OutboundData.PUB_DailyRegisteredUnits.{@Status} ? string,",
				"          registration_date = OutboundData.PUB_DailyRegisteredUnits.{@RegistrationDate} ? timestamp,",
				"     partitionBy('hash', 1),",
				"     format: 'xml',",
				"     namespaces: false) ~> parseRegUnitXML",
				"parseRegUnitXML select(mapColumn(",
				"          OutboundData,",
				"          unit_id,",
				"          unit_type,",
				"          party_id,",
				"          party_name,",
				"          associated_participant_id,",
				"          associated_participant_name,",
				"          trading_site_id,",
				"          intermediary,",
				"          aolr_registered,",
				"          status,",
				"          registration_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"FlattenRegUnitsXML parse(ListRegUnits = OutboundData ? (OutboundData as (PUB_DailyRegisteredUnits as (PartyID as string))),",
				"     format: 'xml',",
				"     namespaces: true) ~> parse1",
				"RegUnitsSource foldDown(unroll(OutboundData.PUB_DailyRegisteredUnits, OutboundData.PUB_DailyRegisteredUnits),",
				"     mapColumn(",
				"          unit_id = OutboundData.PUB_DailyRegisteredUnits.{@UnitID},",
				"          unit_name = OutboundData.PUB_DailyRegisteredUnits.{@UnitName},",
				"          aolr_registered = OutboundData.PUB_DailyRegisteredUnits.{@AOLRRegistered},",
				"          associated_participant_id = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantID},",
				"          associated_participant_name = OutboundData.PUB_DailyRegisteredUnits.{@AssociatedParticipantName},",
				"          intermediary = OutboundData.PUB_DailyRegisteredUnits.{@Intermediary},",
				"          party_id = OutboundData.PUB_DailyRegisteredUnits.{@PartyID},",
				"          party_name = OutboundData.PUB_DailyRegisteredUnits.{@PartyName},",
				"          publish_time = OutboundData.PUB_DailyRegisteredUnits.{@PublishTime},",
				"          registration_date = OutboundData.PUB_DailyRegisteredUnits.{@RegistrationDate},",
				"          status = OutboundData.PUB_DailyRegisteredUnits.{@Status},",
				"          trading_site_id = OutboundData.PUB_DailyRegisteredUnits.{@TradingSiteID},",
				"          unit_type = OutboundData.PUB_DailyRegisteredUnits.{@UnitType}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenRegUnitsXML",
				"FormatRegUnits sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          unit_id as string,",
				"          unit_type as string,",
				"          party_id as string,",
				"          party_name as string,",
				"          associated_participant_id as string,",
				"          associated_participant_name as string,",
				"          trading_site_id as string,",
				"          intermediary as string,",
				"          aolr_registered as string,",
				"          status as string,",
				"          registration_date as timestamp,",
				"          last_updated as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RegUnitsSink"
			]
		}
	}
}